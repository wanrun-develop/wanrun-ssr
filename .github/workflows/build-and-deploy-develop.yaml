name: Build And Deploy To Lambda

on:
  push:
    branches:
      - hoge
    #   - develop
    paths:
      - "lambda_handler/**"
  workflow_dispatch:
    inputs:
      branch:
        description: "Select branch to deploy"
        required: true
        default: "main"
        type: choice
        options:
          - main

env:
  # lambda
  LAMBDA_FUNCTION_NAME: wr-${{ vars.ENV }}-internal-wanrun-ssr

  # webapp s3
  WEBAPP_S3_BUCKET_NAME: wr-${{ vars.ENV }}-webapp

  # aws
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::${{ vars.DEVELOP_AWS_ACCOUNT }}:role/github-actions

  # ecr
  ECR_REPOSITORY: wr-${{ vars.ENV }}-internal-wanrun-ssr

jobs:
  go-build:
    name: Lambda-build-and-deploy
    runs-on: ubuntu-latest
    environment: develop
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout SSR repository
        uses: actions/checkout@v4.2.2

      - name: Checkout Webapp repository
        uses: actions/checkout@v4.2.2
        with:
          repository: wanrun-develop/wanrun-webapp
          path: webapp
          ref: develop

      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}" >> webapp/.env
          echo "NEXT_PUBLIC_GOOGLE_MAP_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_MAP_ID }}" >> webapp/.env
          echo "NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID }}" >> webapp/.env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> webapp/.env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Docker layers
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ github.ref }}-${{ github.sha }}
            ${{ github.ref }}
            refs/head/${{ vars.ENV }}

      - name: Set up buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: "true"

      - name: Docker Build and push
        id: docker-build-and-push
        uses: docker/build-push-action@v6.13.0
        with:
          context: ./webapp
          provenance: false
          # platforms: linux/arm64
          # target: deploy
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Logout from Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
