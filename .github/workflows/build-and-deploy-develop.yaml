name: Build And Deploy To Lambda

on:
  push:
    branches:
      - hoge
    #   - develop
    paths:
      - "lambda_handler/**"
  workflow_dispatch:
    inputs:
      branch:
        description: "Select branch to deploy"
        required: true
        default: "main"
        type: choice
        options:
          - main

env:
  # lambda
  LAMBDA_FUNCTION_NAME: wr-${{ vars.ENV }}-wanrun-ssr

  # webapp s3
  WEBAPP_S3_BUCKET_NAME: wr-${{ vars.ENV }}-webapp

  # aws
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::${{ vars.DEVELOP_AWS_ACCOUNT }}:role/github-actions

  # ecr
  ECR_REPOSITORY: wr-${{ vars.ENV }}-internal-wanrun-ssr

jobs:
  go-build:
    name: Lambda-build-and-deploy
    runs-on: ubuntu-latest
    permissions: 
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download server files from S3
        run: |
          aws s3 cp s3://${{ env.WEBAPP_S3_BUCKET_NAME }}/server/ server/ --recursive
          aws s3 cp s3://${{ env.WEBAPP_S3_BUCKET_NAME }}/standalone/ standalone/ --recursive

      - name: debug
        run: |
          echo "=== Directory sizes ==="
          echo "Server directory size:"
          du -sh server/
          echo "Standalone directory size:"
          du -sh standalone/
          echo "Total size of both directories:"
          du -sh server/ standalone/

      - name: Install Zip
        run: |
          sudo apt update
          sudo apt install -y zip

      - name: Setup Node
        uses: actions/setup-node@v4.2.0
        with:
          node-version: 20.14.0 # https://github.com/actions/node-versions/releases
          cache: yarn
  
      # Lambda内のnext実行用
      - name: Dependency Install
        run: yarn install --frozen-lockfile

      - name: Cache Next.js Build Output
        uses: actions/cache@v4.2.0
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock', '**/*.js', '**/*.ts', '**/*.tsx', '**/*.jsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Build Next.js App
        run: yarn build

      - name: Cache Docker layers
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ github.ref }}-${{ github.sha }}
            ${{ github.ref }}
            refs/head/${{ vars.ENV }}

      - name: Set up buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.8.0

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: 'true'

      - name: Docker Build and push
        id: docker-build-and-push
        uses: docker/build-push-action@v6.13.0
        with:
            context: ./
            # platforms: linux/arm64
            # target: deploy
            file: ./Dockerfile
            builder: ${{ steps.buildx.outputs.name }}
            push: true
            tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            github-token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Logout from Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      # s3経由でLambdaの更新
      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      # - name: Upload new Lambda version
      #   run: |
      #     # ZIP ファイルをアップロード
      #     aws lambda update-function-code \
      #       --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
      #       --zip-file fileb://lambda.zip

          # 新しいバージョンを発行
          # VERSION=$(aws lambda publish-version --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query Version --output text)
          
          # echo "New Lambda version: $VERSION"
